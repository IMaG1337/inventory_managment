# to delete files
import glob
# System libraries
import os
import logging
import cv2
from datetime import datetime

# QR Code
from qreader import QReader

# Telegram
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    PollAnswerHandler,
    filters,
)

# SQL request in to Database
from telegram_db import (
    check_id,
    detail_device,
    detail_employee,
    detail_office,
    detail_office_all,
    insert_inventory_card,
    movents,
    select,
    select_bio_employee,
    update_chat_id,
)

# Settings
from config import settings

# Enable logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)


CHOICES, COMPUTER, PEOPLE, OFFICE, NEXT_EMPLOYEE_OR_ROOM, POOL, NEXT, DETAIL, DETAIL_CHOICE, CONTACT = range(10)

# KEYBOARDS
REPLY_KEYBOARD = [["–£—á—ë—Ç", "–°–≤–µ—Ä–∫–∞", "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–í—ã—Ö–æ–¥"]]
REPLY_KEYBOARD_NEXT = [["–°–ª–µ–¥—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "–ú–µ–Ω—é", "–í—ã—Ö–æ–¥"]]
REPLY_KEYBOARD_YES_NOT = [["–î–∞", "–ù–µ—Ç"]]

NOW = datetime.now().strftime("%H:%M:%S")

EMPLOYEE_OFFICE_DEVICE = {
    "device": "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "office": "–æ—Ñ–∏—Å–∞",
    "employee": "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    }

# bot token
TOKEN = settings.TOKEN


#  ------------------------------Decode function--------------------------------
def decode_image(file_name: str) -> str:
    qreader = QReader()
    image = cv2.imread(file_name)
    # –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ pyzbar –Ω–æ –æ–Ω –ø–ª–æ—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –Ω–∞ stackoverwlow –Ω–∞—à–µ–ª —ç—Ç–æ—Ç –ø–æ—Å—Ç
    # https://stackoverflow.com/questions/61442775/preprocessing-images-for-qr-detection-in-python/61443430#61443430
    # –ø–æ —ç—Ç–æ–º—É –ø–æ–¥–∫–ª—é—á–∏–ª kraken –≤ –Ω–µ–º –µ—Å—Ç—å nlbin –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–∞—à–µ–ª –ª–∏–±—É qreader
    decoded_text = qreader.detect_and_decode(image)
    if decoded_text:
        return decoded_text
# ------------------------------------------------------------------------------


# ------------------------------Delete image------------------------------------
def delete_all_image(user: str) -> None:
    for file in glob.glob(f"./static_telegram/{user}*.jpg"):
        os.remove(file)
# ------------------------------------------------------------------------------


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the conversation and asks the user about function"""

    user_id = update.message.from_user.id
    result = await check_id(user_id)  # check if the id is in our database
    if result:
        await update.message.reply_text(
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
            reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True),
        )
        return CHOICES
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
    return CONTACT


async def choices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Stores the selected function and asks for a photo.

    user is object class telegram._user.User

    incoming data user like: {
        'is_bot': bool
        'username': str
        'first_name': str
        'id': int(9 range)
        'language_code': str (like 'ru')
        }

    context.user_data["choice"] = text <- (saving choice user)
    """
    user = update.message.from_user
    text = update.message.text
    if text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ qr-code —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üñ• ‚å®Ô∏è üñ®, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üë® üë© –∏–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏—è üè¢",
            reply_markup=ReplyKeyboardRemove(),
        )
        return DETAIL
    context.user_data["choice"] = text
    context.user_data["photos_device"] = []
    logger.info(f"Choices of {user.first_name}: {update.message.text}")
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ qr-code –æ—Ñ–∏—Å–∞ üè¢",
        reply_markup=ReplyKeyboardRemove(),
    )
    return OFFICE


async def next_employee_or_room(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    context.user_data["poll"] = ""
    if text == "–°–ª–µ–¥—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫":
        context.user_data["photos_device"] = []
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ qr-code —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üë® üë©",
            reply_markup=ReplyKeyboardRemove(),
        )
        return PEOPLE
    elif text == "–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ":
        context.user_data["photos_device"] = []
        context.user_data["photo_office"] = ""
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ qr-code –æ—Ñ–∏—Å–∞ üè¢",
            reply_markup=ReplyKeyboardRemove(),
        )
        return OFFICE
    elif text == "–ú–µ–Ω—é":
        context.user_data["photos_device"] = []
        context.user_data["photo_office"] = ""
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é",
            reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True),
        )
        return CHOICES


async def photo_office(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    ask for qr-code office.
    """

    user = update.message.from_user
    file_name = f"./static_telegram/{user.id}-{NOW}-office.jpg"
    get_foto = await update.message.photo[-1].get_file()
    await get_foto.download_to_drive(file_name)
    logger.info(f"Photo of {user.first_name}: {file_name}")
    try:
        check_box = decode_image(file_name)
        if check_box[0] == "office":
            context.user_data["photo_office"] = check_box[1]  # add office to user data for further work
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ qr-code —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üë® üë©.")
            return PEOPLE
        else:
            await update.message.reply_text(
                f"–≠—Ç–æ qr-code {EMPLOYEE_OFFICE_DEVICE[check_box[0]]} üîÅ\n"
                f"–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ qr-code –æ—Ñ–∏—Å–∞\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ -> /cancel"
            )

    except Exception as e:
        os.remove(file_name)
        await update.message.reply_text("–í–∞—à qr-cod –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üîÅ")
        logger.info(f"Error of {user.first_name}: {e}")


async def photo_people(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ask for qr-code people."""

    user = update.message.from_user
    get_foto = await update.message.photo[-1].get_file()
    file_name = f"./static_telegram/{user.id}-{NOW}-people.jpg"
    await get_foto.download_to_drive(file_name)
    logger.info(f"Photo of {user.first_name}: {file_name}")
    try:
        check_box = decode_image(file_name)
        if check_box[0] == "employee":
            context.user_data["photo_people"] = check_box[1]
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ qr-code —É—Å—Ç—Ä–æ–π—Å—Ç–≤ üñ• ‚å®Ô∏è üñ®")
            return COMPUTER
        else:
            await update.message.reply_text(
                f"–≠—Ç–æ qr-code {EMPLOYEE_OFFICE_DEVICE[check_box[0]]} üîÅ\n"
                f"–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ qr-code —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ -> /cancel"
            )

    except Exception as e:
        os.remove(file_name)
        logger.info(f"Error of {user.first_name}: {e}")
        await update.message.reply_text("–í–∞—à qr-cod –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üîÅ")


async def photo_computer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ask for qr-code computer."""

    choice = context.user_data["choice"]
    choice_dict = {
        "–°–≤–µ—Ä–∫–∞": "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ",
        "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ": "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ",
        "–£—á—ë—Ç": "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—á—ë—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
    }
    user = update.message.from_user
    get_foto = await update.message.photo[-1].get_file()
    file_name = f"./static_telegram/{user.id}-{NOW}-computer.jpg"
    await get_foto.download_to_drive(file_name)
    logger.info(f"Photo of {user.first_name}: {file_name}")
    try:
        check_box = decode_image(file_name)
        if check_box[0] == "device":
            if check_box[1] in context.user_data["photos_device"]:
                await update.message.reply_text(
                    f"–î–∞–Ω–Ω—ã–π qr-cod –í—ã —É–∂–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π. üîÅ\n"
                    f"–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel\n{choice_dict[choice]} –Ω–∞–∂–º–∏—Ç–µ /next"
                )
                return COMPUTER
            else:
                context.user_data["photos_device"].append(check_box[1])
                await update.message.reply_text(
                    f"Qr-cod –ø—Ä–∏–Ω—è—Ç ‚úÖ\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
                    f"{choice_dict[choice]} –Ω–∞–∂–º–∏—Ç–µ /next\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel."
                )
                return COMPUTER
        else:
            await update.message.reply_text(
                f"–≠—Ç–æ qr-code {EMPLOYEE_OFFICE_DEVICE[check_box[0]]}\n\n"
                f"–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ qr-code —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel\n"
                f"{choice_dict[choice]} –Ω–∞–∂–º–∏—Ç–µ /next"
            )

    except Exception as e:
        logger.info(f"Error of {user.first_name}: {e}")
        os.remove(file_name)
        await update.message.reply_text("–í–∞—à qr-cod –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üîÅ")


async def next(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    delete_all_image(user_id)
    user_data = context.user_data["choice"]

    all_devices = context.user_data["photos_device"]
    user = context.user_data["photo_people"]
    office = context.user_data["photo_office"]
# --------------------------------–£–ß–ï–¢------------------------------------------
    if user_data == "–£—á—ë—Ç":
        data = await insert_inventory_card(all_devices, user, office)
        bio_employee = await select_bio_employee(user)
        # 1) if there are no unaccounted for, then just send a message
        if data["–Ω–µ —É—á—Ç—ë–Ω"] == []:
            for i in data["—É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_NEXT, one_time_keyboard=True),
            )
            return NEXT_EMPLOYEE_OR_ROOM

        # 2) if there are accounted for and not accounted for
        elif data["—É—á—Ç—ë–Ω"] != [] and data["–Ω–µ —É—á—Ç—ë–Ω"] != []:
            context.user_data["poll"] = data["uid"]
            context.user_data["poll"]["choice"] = "–£—á—ë—Ç"
            for i in data["—É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
            for i in data["–Ω–µ —É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
            devices_n = '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' if len(data["–Ω–µ —É—á—Ç—ë–Ω"]) > 1 else '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
            await update.message.reply_text(
                f"–ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–∏—Ç—å {devices_n} –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {bio_employee}? ü§î",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_YES_NOT, one_time_keyboard=True),
            )
            return POOL

        # 3) there are only unaccounted for
        elif data["—É—á—Ç—ë–Ω"] == [] and data["–Ω–µ —É—á—Ç—ë–Ω"] != []:
            context.user_data["poll"] = data["uid"]
            context.user_data["poll"]["choice"] = "–£—á—ë—Ç"
            # 3.1) check if more than 1 device
            if len(data["–Ω–µ —É—á—Ç—ë–Ω"]) > 1:
                await update.message.reply_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–∂–µ –±—ã–ª–∏ —É—á—Ç–µ–Ω—ã, –∂–µ–ª–∞–µ—Ç–µ –∏—Ö –ø–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–∏—Ç—å? üòê")
                for i in data["–Ω–µ —É—á—Ç—ë–Ω"]:
                    await update.message.reply_text(i, parse_mode="HTML")
                    delete_all_image(user_id)
                await update.message.reply_text(
                    f"–ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {bio_employee}? ü§î",
                    reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_YES_NOT, one_time_keyboard=True),
                )
                return POOL
            # 3.2) if 1
            else:
                await update.message.reply_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –±—ã–ª–æ —É—á—Ç–µ–Ω–æ üòê")
                await update.message.reply_text(data["–Ω–µ —É—á—Ç—ë–Ω"][0], parse_mode="HTML")
                await update.message.reply_text(
                    f"–ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {bio_employee}? ü§î?",
                    reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_YES_NOT, one_time_keyboard=True),
                )
                return POOL
# ------------------------------------------------------------------------------

# ----------------------------------–°–í–ï–†–ö–ê--------------------------------------
    elif user_data == "–°–≤–µ—Ä–∫–∞":
        bio_employee = await select_bio_employee(user)
        data = await select(all_devices, user, office)

        # 1) if there are no unaccounted for, then just send a message
        if data["–Ω–µ —É—á—Ç—ë–Ω"] == []:
            for i in data["—É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
            delete_all_image(user_id)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_NEXT, one_time_keyboard=True),
            )
            return NEXT_EMPLOYEE_OR_ROOM

        # 2) if there are accounted for and not accounted for
        elif data["—É—á—Ç—ë–Ω"] != [] and data["–Ω–µ —É—á—Ç—ë–Ω"] != []:
            context.user_data["poll"] = data["uid"]
            context.user_data["poll"]["choice"] = "–°–≤–µ—Ä–∫–∞"
            for i in data["—É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
            for i in data["–Ω–µ —É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
            devices_y = "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" if len(data["–Ω–µ —É—á—Ç—ë–Ω"]) > 1 else "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            await update.message.reply_text(
                f"–ñ–µ–ª–∞–µ—Ç–µ —É—á–µ—Å—Ç—å {devices_y} –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {bio_employee}? ü§î",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_YES_NOT, one_time_keyboard=True),
            )
            return POOL

        # 3) there are only unaccounted for
        elif data["—É—á—Ç—ë–Ω"] == [] and data["–Ω–µ —É—á—Ç—ë–Ω"] != []:
            context.user_data["poll"] = data["uid"]
            context.user_data["poll"]["choice"] = "–°–≤–µ—Ä–∫–∞"
            devices_v = "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" if len(data["–Ω–µ —É—á—Ç—ë–Ω"]) > 1 else "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            choise_v = "—É—á—Ç—ë–Ω–Ω—ã–µ" if len(data["–Ω–µ —É—á—Ç—ë–Ω"]) > 1 else "—É—á—Ç—ë–Ω–Ω–æ–µ"
            await update.message.reply_text(f"–ï—Å—Ç—å –Ω–µ {choise_v} {devices_v} üòê")
            for i in data["–Ω–µ —É—á—Ç—ë–Ω"]:
                await update.message.reply_text(i, parse_mode="HTML")
                delete_all_image(user_id)
            await update.message.reply_text(
                f"–ñ–µ–ª–∞–µ—Ç–µ —É—á–µ—Å—Ç—å {devices_v} –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {bio_employee}? ü§î",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_YES_NOT, one_time_keyboard=True),
            )
            return POOL
# ------------------------------------------------------------------------------

# ---------------------------–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï----------------------------------------
    elif user_data == "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ":
        response = await movents(all_devices, user, office)
        if response["—É—á—Ç—ë–Ω"] != []:
            for device in response["—É—á—Ç—ë–Ω"]:
                await update.message.reply_text(device, parse_mode="HTML")
        elif response["–Ω–µ —É—á—Ç—ë–Ω"] != []:
            for device in response["–Ω–µ —É—á—Ç—ë–Ω"]:
                await update.message.reply_text(device, parse_mode="HTML")
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
            reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_NEXT, one_time_keyboard=True),
        )
        return NEXT_EMPLOYEE_OR_ROOM
# ------------------------------------------------------------------------------


async def poll(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None or int:
    """Sends a predefined poll"""

    text = update.message.text
    devices = context.user_data["poll"]["devices"]
    employee = context.user_data["poll"]["employee"]
    office = context.user_data["poll"]["office"]
    choice = context.user_data["poll"]["choice"]
    choice_dict = {"–°–≤–µ—Ä–∫–∞": "–£—á—ë—Ç –Ω–µ –ø—Ä–æ–≤–µ–¥—ë–Ω", "–£—á—ë—Ç": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}
    if text == "–î–∞":
        if len(devices) > 1:
            questions = context.user_data["poll"]["name_model"]
            message = await context.bot.send_poll(
                update.effective_chat.id,
                "–ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —É—á—ë—Ç–∞ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ü§î?"
                if choice == "–°–≤–µ—Ä–∫–∞"
                else "–ö–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å  ü§î?",
                questions,
                is_anonymous=False,
                allows_multiple_answers=True,
            )
            # Save some info about the poll the bot_data for later use in receive_poll_answer
            payload = {
                message.poll.id: {
                    "questions": questions,
                    "message_id": message.message_id,
                    "chat_id": update.effective_chat.id,
                    "answers": 0,
                }
            }
            context.bot_data.update(payload)
        else:
            if choice == "–°–≤–µ—Ä–∫–∞":
                response = await insert_inventory_card(devices, employee, office)
            else:
                response = await movents(devices, employee, office)
            await update.message.reply_text(response["—É—á—Ç—ë–Ω"][0], parse_mode="HTML")

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_NEXT, one_time_keyboard=True),
            )
            return NEXT_EMPLOYEE_OR_ROOM

    elif text == "–ù–µ—Ç":
        await update.message.reply_text(choice_dict[choice])
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
            reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_NEXT, one_time_keyboard=True),
        )
        return NEXT_EMPLOYEE_OR_ROOM


async def receive_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None or int:
    """Summarize a users poll vote"""

    answer = update.poll_answer
    choice = context.user_data["poll"]["choice"]
    answered_poll = context.bot_data[answer.poll_id]  # answer.poll_id = '5321011176010678462'
    try:
        answered_poll["questions"]
    # this means this poll answer update is from an old poll, we can't do our answering then
    except KeyError:
        return
    selected_options = answer.option_ids  # list int like this -> [0, 1, ...]
    all_devices = context.user_data["poll"]["devices"]  # uids device
    employee = context.user_data["poll"]["employee"]  # uid employee
    office = context.user_data["poll"]["office"]  # uid office
    selected_devices = []  # only those devices selected by the user
    for num in selected_options:
        selected_devices.append(all_devices[num])
    if choice == "–°–≤–µ—Ä–∫–∞":
        response = await insert_inventory_card(selected_devices, employee, office)
    elif choice == "–£—á—ë—Ç":
        response = await movents(selected_devices, employee, office)
    for device in response["—É—á—Ç—ë–Ω"]:
        await context.bot.send_message(
            answered_poll["chat_id"],
            device,
            parse_mode="HTML",
        )
    await context.bot.stop_poll(answered_poll["chat_id"], answered_poll["message_id"])
    await context.bot.send_message(
        chat_id=answered_poll["chat_id"],
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
        reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_NEXT, one_time_keyboard=True),
    )
    return NEXT_EMPLOYEE_OR_ROOM


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""

    user = update.message.from_user
    logger.info(f"User {user.first_name} canceled the conversation.")
    await update.message.reply_text("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=ReplyKeyboardRemove())

    # if user types /cancel in chat without reaching the end
    delete_all_image(user.id)
    return ConversationHandler.END


async def detail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    get_foto = await update.message.photo[-1].get_file()
    file_name = f"./static_telegram/{user.id}-{NOW}-detail.jpg"
    await get_foto.download(file_name)
    logger.info(f"Photo of {user.first_name}: {file_name}")
    try:
        check_box = decode_image(file_name)
        os.remove(file_name)
        if check_box[0] == "device":
            result = await detail_device(check_box[1])
            await update.message.reply_text(f"{result}", parse_mode="HTML")
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True),
            )
            return CHOICES
        elif check_box[0] == "office":
            context.user_data["office_detail"] = check_box[1]
            result = await detail_office(check_box[1])
            await update.message.reply_text(f"{result}", parse_mode="HTML")
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç?",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD_YES_NOT, one_time_keyboard=True),
            )
            return DETAIL_CHOICE

        elif check_box[0] == "employee":
            context.user_data["employee_detail"] = check_box[1]
            result = await detail_employee(check_box[1])
            await update.message.reply_text(f"{result}", parse_mode="HTML")
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
                reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True),
            )
            return CHOICES

        else:
            await update.message.reply_text(
                "–í–∞—à qr-cod –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–≥–æ –µ—â—ë —Ä–∞–∑ üîÅ\n" "–õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞"
            )
            return DETAIL

    except Exception as e:
        logger.info(f"Error of {user.first_name}: {e}")
        os.remove(file_name)
        await update.message.reply_text(
            "–í–∞—à qr-cod –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üîÅ\n" "–õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        )
        return DETAIL


async def detail_choices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    office = context.user_data["office_detail"]
    if text == "–î–∞":
        result = await detail_office_all(office)
        await update.message.reply_text(result, parse_mode="HTML")
    else:
        office = ""
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é",
            reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True),
        )
    return CHOICES


async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    con = (
        update.message.contact
    )  # like contact {'user_id': 358519422, 'first_name': '–û–ª—è', 'phone_number': '79119998877'}
    result = await update_chat_id([con["user_id"], con["phone_number"]])  # True or False
    if result:
        await update.message.reply_text("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç.")
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω—Ü–∏—é", reply_markup=ReplyKeyboardMarkup(REPLY_KEYBOARD, one_time_keyboard=True)
        )
        return CHOICES
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –í–∞—Å –≤ –ë–∞–∑—É.")
        await update.message.reply_text("–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start, –ª–∏–±–æ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é")
        return ConversationHandler.END


async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start, –ª–∏–±–æ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é")


async def office_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ QR-cod –æ—Ñ–∏—Å–∞ üè¢.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel")


async def employee_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ QR-cod —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üë® üë©.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel")


async def device_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ QR-cod —É—Å—Ç—Ä–æ–π—Å—Ç–≤ üñ• ‚å®Ô∏è üñ®.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel")


async def next_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )


def main() -> None:
    """Run the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOICES: [
                MessageHandler(filters.Regex("^(–°–≤–µ—Ä–∫–∞|–£—á—ë—Ç|–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ|–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)$"), choices),
                MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), cancel),
                CommandHandler("start", next_help),
            ],
            OFFICE: [
                MessageHandler(filters.PHOTO, photo_office),
                CommandHandler("cancel", cancel),
                MessageHandler(filters.TEXT, office_help),
            ],
            PEOPLE: [
                MessageHandler(filters.PHOTO, photo_people),
                CommandHandler("cancel", cancel),
                MessageHandler(filters.TEXT, employee_help),
            ],
            COMPUTER: [
                MessageHandler(filters.PHOTO, photo_computer),
                CommandHandler("cancel", cancel),
                CommandHandler("next", next),
                MessageHandler(filters.TEXT, device_help),
            ],
            POOL: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), poll), PollAnswerHandler(receive_poll_answer)],
            NEXT_EMPLOYEE_OR_ROOM: [
                MessageHandler(
                    filters.Regex("^(–°–ª–µ–¥—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫|–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ|–ú–µ–Ω—é)$"), next_employee_or_room
                ),
                MessageHandler(filters.Regex("^–í—ã—Ö–æ–¥$"), cancel),
                CommandHandler("cancel", cancel),
                MessageHandler(filters.TEXT, next_help),
            ],
            DETAIL: [MessageHandler(filters.PHOTO, detail), CommandHandler("cancel", cancel)],
            DETAIL_CHOICE: [
                MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), detail_choices),
                CommandHandler("cancel", cancel),
            ],
            CONTACT: [MessageHandler(filters.CONTACT, contact), CommandHandler("cancel", cancel)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=False,
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT, help))
    # Run the bot until the user presses Ctrl-C
    application.run_polling()


if __name__ == "__main__":
    main()
